geom_line(aes(y = .fitted)) +
viridis::scale_color_viridis() +
theme(legend.position = c(0, 1), legend.justification = c(0, 1))
ggplot(aug, aes(.fitted, .resid, size = .cooksd)) +
geom_point()
df = data_frame(fun = rep(c(lapply, map), 2),
n = rep(c(1e5, 1e7), each = 2),
comp_time = map2(fun, n, ~system.time(.x(1:.y, sqrt))))
df$comp_time
map(1:4, log)
knitr::opts_chunk$set(cache = TRUE, error = TRUE, fig.width = 4, fig.asp = 1)
library(tidyverse)
tdf = tibble(x = 1:1e4, y = rnorm(1e4))  # == data_frame(x = 1:1e4, y = rnorm(1e4))
class(tdf)
tdf
dfs = list(
df = data.frame(abc = letters[1:3], xyz = letters[24:26]),
tbl = data_frame(abc = letters[1:3], xyz = letters[24:26])
)
sapply(dfs, function(d) class(d$abc))
sapply(dfs, function(d) d$a)
sapply(dfs, function(d) class(d[, "abc"]))
tibble(ints = 1:5,
powers = lapply(1:5, function(x) x^(1:x)))
sum(1:8) %>%
sqrt()
library(ggplot2movies)
str(movies)
filter(movies, length > 360)
filter(movies, length > 360) %>%
select(title, rating, votes)
filter(movies, Animation == 1, votes > 1000) %>%
select(title, rating) %>%
arrange(desc(rating))
filter(movies, mpaa != "") %>%
group_by(year, mpaa) %>%
summarize(avg_budget = mean(budget, na.rm = TRUE),
avg_rating = mean(rating, na.rm = TRUE)) %>%
arrange(desc(year), mpaa)
filter(movies, mpaa != "") %>%
count(year, mpaa, Animation, sort = TRUE)
basetab = with(movies[movies$mpaa != "", ], table(year, mpaa, Animation))
basetab[1:5, , ]
t1 = data_frame(alpha = letters[1:6], num = 1:6)
t2 = data_frame(alpha = letters[4:10], num = 4:10)
full_join(t1, t2, by = "alpha", suffix = c("_t1", "_t2"))
data_frame(group = sample(letters[1:3], 10, replace = TRUE),
value = rnorm(10)) %>%
group_by(group) %>%
mutate(group_average = mean(value))
who  # Tuberculosis data from the WHO
who %>%
gather(group, cases, -country, -iso2, -iso3, -year)
who %>%
select(-iso2, -iso3) %>%
gather(group, cases, -country, -year) %>%
count(country, year, wt = cases) %>%
ggplot(aes(x = year, y = n, group = country)) +
geom_line(size = .2)
bigdf = data_frame(int = 1:1e6,
squares = int^2,
letters = sample(letters, 1e6, replace = TRUE))
system.time(
write.csv(bigdf, "base-write.csv")
)
system.time(
write_csv(bigdf, "readr-write.csv")
)
read.csv("base-write.csv", nrows = 3)
read_csv("readr-write.csv", n_max = 3)
d = data_frame(x = runif(20, 0, 10),
y = 2 * x + rnorm(10))
qplot(x, y, data = d)
library(broom)  # Not attached with tidyverse
model = lm(y ~ x, d)
tidy(model)
aug = augment(model)
aug
ggplot(aug, aes(x = x)) +
geom_point(aes(y = y, color = .resid)) +
geom_line(aes(y = .fitted)) +
viridis::scale_color_viridis() +
theme(legend.position = c(0, 1), legend.justification = c(0, 1))
ggplot(aug, aes(.fitted, .resid, size = .cooksd)) +
geom_point()
df = data_frame(fun = rep(c(lapply, map), 2),
n = rep(c(1e5, 1e7), each = 2),
comp_time = map2(fun, n, ~system.time(.x(1:.y, sqrt))))
df$comp_time
map(1:4, log)
map(1:4, log, base = 2)
map(1:4, ~ log(4, base = .x))  # == map(1:4, function(x) log(4, base = x))
map_dbl(1:4, log, base = 2)
map_int(1:4, log, base = 2)
fwd = 1:10
bck = 10:1
map2_dbl(fwd, bck, `^`)
data_frame(ints = 1:5, lets = letters[1:5], sqrts = ints^.5) %>%
map_if(is.numeric, ~ .x^2)
movies %>%
filter(mpaa != "") %>%
split(.$mpaa) %>%
map(~ lm(rating ~ budget, data = .)) %>%
map_df(tidy, .id = "mpaa-rating") %>%
arrange(term)
d =
data_frame(
dist = c("normal", "poisson", "chi-square"),
funs = list(rnorm, rpois, rchisq),
samples = map(funs, ~.(100, 5)),
mean = map_dbl(samples, mean),
var = map_dbl(samples, var)
)
d$median = map_dbl(d$samples, median)
d
train = sample(nrow(diamonds), floor(nrow(diamonds) * .67))
setdiff(names(diamonds), "price") %>%
combn(2, paste, collapse = " + ") %>%
structure(., names = .) %>%
map(~ formula(paste("price ~ ", .x))) %>%
map(lm, data = diamonds[train, ]) %>%
map_df(augment, newdata = diamonds[-train, ], .id = "predictors") %>%
group_by(predictors) %>%
summarize(rmse = sqrt(mean((price - .fitted)^2))) %>%
arrange(rmse)
map(-1:3, ~.x ^ seq(-.5, .5, .5)) %>%
flatten_dbl()
junk = list(letters, 1:20, median)
map(junk, ~ log(.x))
safe = map(junk, ~ safely(log)(.x))  # Note the different syntax from try(log(.x)). `safely(log)` creates a new function.
safe
transpose(safe)
map_if(transpose(safe)$result, ~!is.null(.x), median)
library(stringr)  # not attached with tidyverse
fishes <- c("one fish", "two fish", "red fish", "blue fish")
str_detect(fishes, "two")
str_replace_all(fishes, "fish", "banana")
str_extract(fishes, "[a-z]\\s")
who %>%
select(-iso2, -iso3) %>%
gather(group, cases, -country, -year) %>%
mutate(group = str_replace(group, "new_*", ""),
method = str_extract(group, "[a-z]+"),
gender = str_sub(str_extract(group, "_[a-z]"), 2, 2),
age = str_extract(group, "[0-9]+"),
age = ifelse(str_length(age) > 2,
str_c(str_sub(age, 1, -3), str_sub(age, -2, -1), sep = "-"),
str_c(age, "+"))) %>%
group_by(year, gender, age, method) %>%
summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = total_cases, linetype = gender)) +
geom_line() +
facet_grid(method ~ age,
labeller = labeller(.rows = label_both, .cols = label_both)) +
scale_y_log10() +
theme_light() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
pipe_stopifnot = function(df, test){
stopifnot(test)
return(df)
}
print_and_go = function(df, what_to_print) {
cat(what_to_print)
return(df)
}
# Chunk 1
require(googlesheets)
require(tidyverse)
require(printr) #for tables in knitr output
#set locale to read Chinese characters
Sys.setlocale(category = "LC_CTYPE", locale = "chs")
# Chunk 2
gs_auth()
# gd_token()
mdata <- gs_url("https://docs.google.com/spreadsheets/d/1UQzuofhHAZYumm0kGHzLRLllMutAaCepHZTY2C0gRrQ/edit#gid=1446310397")
booking <- mdata %>%
gs_read(ws = 1)
booking2 <- booking #backup
# Chunk 3
booking <- setNames(booking, c("timestamp", "name", "dob", "phone", "type",
"medicare", "session", "contact",
"mdicare_old", "gender"))
# drop blank fields
booking <- booking[ , -c(4, 9,10)]
#some dates are age, so separate those with a "/"
#process age
booking$age <- substr(booking$dob, nchar(booking$dob)-3,
nchar(booking$dob))
#a couple of unique cases with non-numeric characters
booking$age[which(booking$age =="nths")] <- 4+10/12
booking$age[which(booking$age =="8个月")] <- 8/12
booking$age <- as.numeric(booking$age)
booking$age[which(booking$age > 120)] <-
2017 - booking$age[which(booking$age > 120)] #working till here :)
#process session
booking$type[which(booking$type == "有（持卡免费）(Yes, free)")] <-
"有（持卡免费）"
booking$type[which(booking$type ==
"没有（收疫苗成本费 A$10.00）(No, cost is A$10.00")] <-
"没有（收疫苗成本费 A$10.00）"
booking$session <- factor(booking$session,
levels=c("2017年4月25日 10am - 12pm",
"2017年4月25日 2pm - 4pm"),
labels=c("Morning session",
"Afternoon session"))
#process medicare stauts
booking$type <- factor(booking$type,
levels=c("有（持卡免费）",
"没有（收疫苗成本费 A$10.00）"),
labels=c("有",
"没有"))
# Chunk 4
is.child <- function(x) x < 3 #different vaccine for child aged 35 mo or younger
booking$child <- sapply(booking$age, is.child)
booking$child <- factor(booking$child,
levels=c("TRUE", "FALSE"),
labels=c("Children (< 3 years)", "Adult"))
# Chunk 5
print(paste("Total bookings", nrow(booking)))
# print("Bookings by medicare status")
g.status <- booking %>% group_by(type) %>% count(type)
# print("Bookings by morning/afternoon session")
g.session <- booking %>% group_by(session) %>% count(session)
# print("Bookings by moring/afternoon session and medicare status")
g.session.type <- booking %>% group_by(session) %>% count(type)
# print("Bookings by child/atult status")
# booking %>% count(child)
# print("Bookings by moring/afternoon session and child/adult status")
g.child <- booking %>% group_by(session) %>% count(child)
# Chunk 6: plot.settings
#plot settings
require(ggthemr)
ggthemr("light")
# themr <- ggthemr("grape", type="outer") #static = FALSE,
# darken_swatch(themr, amount = 0.3)
textSize <- 3
windowsFonts(Arialunicode=windowsFont("Arial Unicode MS"))
theme_ash <- theme(strip.text.x =
element_text(size = 11,
colour="black",
face="bold",
lineheight=1.5,
margin = margin(t = 6, b = 11)),
title = element_text(size=12,
family="Arialunicode"),
# strip.background = element_rect(fill = "red"),
# panel.background = element_rect(fill="blue"),
axis.text = element_text(size=9, face="bold"),
axis.title = element_text(size=9, face="bold"))
# Chunk 8
ggplot(data = g.status) +
geom_bar(mapping = aes(x = type, y=n), stat = "identity") +
geom_label(aes(x=type, y=n, label=n,
hjust=0.5), size=8,
position = position_dodge(width=1)) +
# theme_bw() +
theme_ash + coord_flip() +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by Medicare status")
# Chunk 9
ggplot(data = g.session) +
geom_bar(mapping = aes(x = session, y=n), stat = "identity") +
geom_label(aes(x=session, y=n, label=n,
hjust=0.5), size=8,
position = position_dodge(width=1)) +
# theme_bw() +
theme_ash + coord_flip() +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by session times")
# Chunk 10
ggplot(data = g.session.type) +
geom_bar(mapping = aes(x = type, y=n), stat = "identity") +
geom_label(aes(x=type, y=n, label=n,
hjust=0.5), size=6,
position = position_dodge(width=1)) +
facet_wrap(~session, ncol=1) +
theme_ash + coord_flip() +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by session times and medicare status")
# Chunk 11
ggplot(data = g.child) +
geom_bar(mapping = aes(x = child, y=n), stat = "identity") +
geom_label(aes(x=child, y=n, label=n,
hjust=0.5), size=6,
position = position_dodge(width=1)) +
facet_wrap(~session, ncol=1) +
coord_flip() +
theme_ash +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by session times and medicare status")
# Chunk 12
write.csv(booking, "booking2017.csv")
library(googlesheets)
library(tidyverse)
library(weatherData)
gs_auth()
# gd_token()
mdata <- gs_url("https://docs.google.com/spreadsheets/d/1SDw-dbE9_IlWikNVFgNHOY3u87_FyRBGuABL1IY2wFw/edit?usp=sharing")
reading <- mdata %>%
gs_read(ws = 1)
# reading <- reading[1:(nrow(reading)-5),]
tail(reading)
reading$Date2 <- as.Date(reading$Date, "%d %B %Y")
reading <- reading[complete.cases(reading), ]
plot(reading$Consumed)
lines(reading$Consumed)
wdata <- getWeatherForDate("ADL", reading$Date2[1], end_date=reading$Date2[nrow(reading)])
reading$max <- wdata[, 2]
reading$min <- wdata[, 4]
ggplot(data = reading) +
geom_point(mapping = aes(x = Date2, y = Consumed)) +
geom_line(mapping = aes(x = Date2, y = Consumed)) +
geom_point(mapping = aes(x = Date2, y = max), colour="red") +
geom_line(mapping = aes(x=Date2, y=max), colour="red") +
geom_point(mapping = aes(x = Date2, y = min), colour="darkgreen") +
geom_line(mapping = aes(x=Date2, y=min), colour="darkgreen")
ggplot(data = reading) +
geom_point(mapping = aes(x = Date2, y = Consumed)) +
geom_line(mapping = aes(x = Date2, y = Consumed)) +
geom_hline(yintercept=mean(reading$Consumed, na.rm = TRUE))
mean(reading$Consumed, na.rm = TRUE)
median(reading$Consumed, na.rm = TRUE)
ggplot(data = reading) +
geom_bar(mapping = aes(x = Date2, y=max, fill = max, colour=NULL), stat = "identity") +
geom_point(mapping = aes(x = Date2, y = Consumed)) +
geom_line(mapping = aes(x = Date2, y = Consumed))
ggplot(data = reading) +
geom_bar(mapping = aes(x = Date2, y=10, fill = max, colour=NULL), stat = "identity") +
geom_point(mapping = aes(x = Date2, y = Consumed)) +
geom_line(mapping = aes(x = Date2, y = Consumed)) +
geom_bar(mapping = aes(x = Date2, y=10, fill = max, colour=NULL), stat = "identity")
geom_point(mapping = aes(x = Date2, y = max), colour="red") +
geom_line(mapping = aes(x=Date2, y=max), colour="red") +
geom_point(mapping = aes(x = Date2, y = min), colour="darkgreen") +
geom_line(mapping = aes(x=Date2, y=min), colour="darkgreen")
View(wdata)
View(wdata)
View(reading)
View(reading)
str(reading)
reading
mdata
str(mdata)
str(mdata)
names(wdata)
names(reading)
mdata <- mdata %>%
gs_edit_cells(input=reading$max, anchor="D2", byrow = TRUE)
library(shiny); runApp('leafletproxytest3.R')
runApp('superzip')
# Chunk 1
require(googlesheets)
require(tidyverse)
require(printr) #for tables in knitr output
#set locale to read Chinese characters
Sys.setlocale(category = "LC_CTYPE", locale = "chs")
# Chunk 2
gs_auth()
# gd_token()
mdata <- gs_url("https://docs.google.com/spreadsheets/d/1UQzuofhHAZYumm0kGHzLRLllMutAaCepHZTY2C0gRrQ/edit#gid=1446310397")
booking <- mdata %>%
gs_read(ws = 1)
booking2 <- booking #backup
# Chunk 3
booking <- setNames(booking, c("timestamp", "name", "dob", "phone", "type",
"medicare", "session", "contact",
"mdicare_old", "gender"))
# drop blank fields
booking <- booking[ , -c(4, 9,10)]
#some dates are age, so separate those with a "/"
#process age
booking$age <- substr(booking$dob, nchar(booking$dob)-3,
nchar(booking$dob))
#a couple of unique cases with non-numeric characters
booking$age[which(booking$age =="nths")] <- 4+10/12
booking$age[which(booking$age =="8个月")] <- 8/12
booking$age <- as.numeric(booking$age)
booking$age[which(booking$age > 120)] <-
2017 - booking$age[which(booking$age > 120)] #working till here :)
#process session
booking$type[which(booking$type == "有（持卡免费）(Yes, free)")] <-
"有（持卡免费）"
booking$type[which(booking$type ==
"没有（收疫苗成本费 A$10.00）(No, cost is A$10.00")] <-
"没有（收疫苗成本费 A$10.00）"
booking$session <- factor(booking$session,
levels=c("2017年4月25日 10am - 12pm",
"2017年4月25日 2pm - 4pm"),
labels=c("Morning session",
"Afternoon session"))
#process medicare stauts
booking$type <- factor(booking$type,
levels=c("有（持卡免费）",
"没有（收疫苗成本费 A$10.00）"),
labels=c("有",
"没有"))
# Chunk 4
is.child <- function(x) x < 3 #different vaccine for child aged 35 mo or younger
booking$child <- sapply(booking$age, is.child)
booking$child <- factor(booking$child,
levels=c("TRUE", "FALSE"),
labels=c("Children (< 3 years)", "Adult"))
# Chunk 5
print(paste("Total bookings", nrow(booking)))
# print("Bookings by medicare status")
g.status <- booking %>% group_by(type) %>% count(type)
# print("Bookings by morning/afternoon session")
g.session <- booking %>% group_by(session) %>% count(session)
# print("Bookings by moring/afternoon session and medicare status")
g.session.type <- booking %>% group_by(session) %>% count(type)
# print("Bookings by child/atult status")
# booking %>% count(child)
# print("Bookings by moring/afternoon session and child/adult status")
g.child <- booking %>% group_by(session) %>% count(child)
# Chunk 6: plot.settings
#plot settings
require(ggthemr)
ggthemr("light")
# themr <- ggthemr("grape", type="outer") #static = FALSE,
# darken_swatch(themr, amount = 0.3)
textSize <- 3
windowsFonts(Arialunicode=windowsFont("Arial Unicode MS"))
theme_ash <- theme(strip.text.x =
element_text(size = 11,
colour="black",
face="bold",
lineheight=1.5,
margin = margin(t = 6, b = 11)),
title = element_text(size=12,
family="Arialunicode"),
# strip.background = element_rect(fill = "red"),
# panel.background = element_rect(fill="blue"),
axis.text = element_text(size=9, face="bold"),
axis.title = element_text(size=9, face="bold"))
# Chunk 8
ggplot(data = g.status) +
geom_bar(mapping = aes(x = type, y=n), stat = "identity") +
geom_label(aes(x=type, y=n, label=n,
hjust=0.5), size=8,
position = position_dodge(width=1)) +
# theme_bw() +
theme_ash + coord_flip() +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by Medicare status")
# Chunk 9
ggplot(data = g.session) +
geom_bar(mapping = aes(x = session, y=n), stat = "identity") +
geom_label(aes(x=session, y=n, label=n,
hjust=0.5), size=8,
position = position_dodge(width=1)) +
# theme_bw() +
theme_ash + coord_flip() +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by session times")
# Chunk 10
ggplot(data = g.session.type) +
geom_bar(mapping = aes(x = type, y=n), stat = "identity") +
geom_label(aes(x=type, y=n, label=n,
hjust=0.5), size=6,
position = position_dodge(width=1)) +
facet_wrap(~session, ncol=1) +
theme_ash + coord_flip() +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by session times and medicare status")
# Chunk 11
ggplot(data = g.child) +
geom_bar(mapping = aes(x = child, y=n), stat = "identity") +
geom_label(aes(x=child, y=n, label=n,
hjust=0.5), size=6,
position = position_dodge(width=1)) +
facet_wrap(~session, ncol=1) +
coord_flip() +
theme_ash +
xlab("") +
ylab("Number of bookings") +
ggtitle("Vaccination camp bookings by session times and medicare status")
# Chunk 12
write.csv(booking, "booking2017.csv")
View(booking2)
?write.csv
write.csv(booking, "booking2017.csv", fileEncoding = "UTF-8")
licence()
RShowDoc("LGPL-2.1")
library(shiny); runApp('leafletproxytest3.R')
?selectInput
setNames(c(1:10), c(10:20))
setNames(c(1:10), c(10:21))
setNames(c(1:10), c(10:19))
str(setNames(c(1:10), c(10:19)))
runApp('leafletproxytest3.R')
runApp('leafletproxytest3.R')
runApp('leafletproxytest3.R')
runApp('leafletproxytest3.R')
runApp('leafletproxytest3.R')
runApp('leafletproxytest3.R')
runApp('C:/Users/Lenovo/github/crashsa/leafletproxytest4.R')
runApp('C:/Users/Lenovo/github/crashsa/leafletproxytest4.R')
runApp('C:/Users/Lenovo/github/crashsa/leafletproxytest4.R')
shiny::runGitHub('asheshwor/crashsa/crash-app.R')
?runGitHub
shiny::runUrl('asheshwor/crashsa/crash-app.R')
shiny::runUrl('https://raw.githubusercontent.com/asheshwor/crashsa/master/crash-app.R')
shiny::runApp('C:/Users/Lenovo/github/crashsa')
?addTiles
runApp('C:/Users/Lenovo/github/crashsa')
